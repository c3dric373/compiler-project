TEST-CASE: pld-test-output/tests-Init-test-coco
TEST OK
TEST-CASE: pld-test-output/tests-Init-0_test_fct
TEST OK
TEST-CASE: pld-test-output/tests-Init-test-rendu-mi-parcours
<<<<<<< HEAD
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-while-0_simple_while_leq
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-while-0_simple_while_greater
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-while-0_simple_while_smaller
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-while-0_simple_while_neq
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-while-0_while_simple_geq
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-while-3_nested_while_with_ifElse
TEST OK
TEST-CASE: pld-test-output/tests-Init-while-1_while_with_if
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-while-2_while_with_equal
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-while-3_nested_while
TEST FAIL (different results at execution)
=======
TEST OK
TEST-CASE: pld-test-output/tests-Init-if_else-0_simple_ifelse
TEST OK
TEST-CASE: pld-test-output/tests-Init-if_else-1_nested_ifElse
TEST OK
TEST-CASE: pld-test-output/tests-Init-if_else-2_combined_ifElse
TEST OK
TEST-CASE: pld-test-output/tests-Init-analyse-statique-5variable_non_affecte_expr_complexe_sub-mult-add1
TEST OK
TEST-CASE: pld-test-output/tests-Init-analyse-statique-5variable_non_affecte_expr_complexe_sub-mult-add2
TEST OK
TEST-CASE: pld-test-output/tests-Init-analyse-statique-1variable-non-affecte
TEST OK
TEST-CASE: pld-test-output/tests-Init-analyse-statique-2variable_non_affecte_expr_complexe_add1
TEST OK
TEST-CASE: pld-test-output/tests-Init-analyse-statique-4variable_non_affecte_expr_complexe_sub2
TEST OK
TEST-CASE: pld-test-output/tests-Init-analyse-statique-4variable_non_affecte_expr_complexe_sub1
TEST OK
TEST-CASE: pld-test-output/tests-Init-analyse-statique-3variable_non_affecte_expr_complexe_mult1
TEST OK
TEST-CASE: pld-test-output/tests-Init-analyse-statique-3variable_non_affecte_expr_complexe_mult2
TEST OK
TEST-CASE: pld-test-output/tests-Init-analyse-statique-2variable_non_affecte_expr_complexe_add2
TEST OK
TEST-CASE: pld-test-output/tests-Init-tableaux-return_add_char_a
TEST OK
TEST-CASE: pld-test-output/tests-Init-tableaux-return_char
TEST OK
TEST-CASE: pld-test-output/tests-Init-tableaux-return_add_char_1
TEST OK
TEST-CASE: pld-test-output/tests-Init-tableaux-return_int_complex
TEST OK
TEST-CASE: pld-test-output/tests-Init-tableaux-affectation_int
TEST OK
TEST-CASE: pld-test-output/tests-Init-tableaux-affectation_char
TEST OK
TEST-CASE: pld-test-output/tests-Init-tableaux-return_add_char_1_2
TEST OK
TEST-CASE: pld-test-output/tests-Init-tableaux-return_int
TEST OK
TEST-CASE: pld-test-output/tests-Init-tableaux-return_char_int_tab
TEST OK
TEST-CASE: pld-test-output/tests-Init-tableaux-return_char_add
TEST OK
TEST-CASE: pld-test-output/tests-Init-tableaux-return_char_sub
TEST OK
>>>>>>> develop
TEST-CASE: pld-test-output/tests-Init-for-1_for_nested_while
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-for-0_simple
<<<<<<< HEAD
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-for-1_no_first_argument
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-for-3_no_third_argument
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-bloc-0_simple_nested_bloc
=======
TEST OK
TEST-CASE: pld-test-output/tests-Init-for-3_no_third_argument
TEST OK
TEST-CASE: pld-test-output/tests-Init-for-1_no_first_argument
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-inferieur-1_inferieur_if
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-inferieur-0_inferieur_simple
>>>>>>> develop
TEST OK
<<<<<<< HEAD
TEST-CASE: pld-test-output/tests-Init-char-inferieur-1_inferieur_if_1
=======
TEST-CASE: pld-test-output/tests-Init-easy-bitwise_int-0_simple_or
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-bitwise_int-1_combination_three
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-bitwise_int-0_simple_and
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-bitwise_int-0_simple_xor
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-addsub4
TEST OK
<<<<<<< HEAD
TEST-CASE: pld-test-output/tests-Init-bloc-3_reassessment_in_else
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-bloc-3_ifElseWhile+blocs
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-if_else-1_nested_ifElse
TEST OK
TEST-CASE: pld-test-output/tests-Init-if_else-0_simple_ifelse
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-if_else-2_combined_ifElse
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-analyse-statique-5variable_non_affecte_expr_complexe_sub-mult-add2
=======
TEST-CASE: pld-test-output/tests-Init-easy-init-3_addition
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-substraction3
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-8_multiplication3Op
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-10_CombineMultAdd_2
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-2-variable-neg
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-9_returnMult
>>>>>>> develop
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-8_multiplication4Op
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-8_multiplicationSimple
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-10_CombineMultAdd_1
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-11_CombineMultSub_2
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-substraction4
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-addmultsub6
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-addmultsub3
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-0_Main
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-11_CombineMultSub_1
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-addition4
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-9_returnSub
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-3_declaration
TEST OK
<<<<<<< HEAD
TEST-CASE: pld-test-output/tests-Init-char-superieur-1_superieur_if
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-char-superieur-2_superieur_complexe _1
=======
TEST-CASE: pld-test-output/tests-Init-easy-init-2_affectation
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-8_multiplicationVariables
>>>>>>> develop
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-8_multiplication3Variables
TEST OK
<<<<<<< HEAD
TEST-CASE: pld-test-output/tests-Init-char-mix-2_if__sup_int_char
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-char-mix-1_if_inf_int_char
=======
TEST-CASE: pld-test-output/tests-Init-easy-init-2_addition
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-11_CombineMultSub_var1
>>>>>>> develop
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-9_returnConst
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-substraction2
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-addsub5
TEST OK
<<<<<<< HEAD
TEST-CASE: pld-test-output/tests-Init-char-inferieur-1_inferieur_if_1
TEST FAIL (different results at execution)
=======
TEST-CASE: pld-test-output/tests-Init-easy-init-4_defdeclexpr
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-11_CombineMultSub_var
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-2-expr-neg
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-10_CombineMultAdd_var1
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-addmultsub4
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-9_returnName
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-10_CombineMultAdd_var2
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-1return-neg
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-5_definition
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-addmultsub5
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-auto-affectation
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-1_fail
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-addsub3
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-9_returnAdd
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-init-11_CombineMultSub_var2
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-minus-unaire-0_minus_var
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-minus-unaire-0_minus_after_plus
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-minus-unaire-0_minus_after_mult
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-minus-unaire-0_minus_ret
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-minus-unaire-0_minus_after_int
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-if-combine_all
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-if-cmpgreaterequal-0_simple_cmp_great_eq
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-if-cmpgreaterequal-1_nested_cmp_great_eq
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-if-neq-1_nested_neq
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-if-neq-0_neq_simple
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-if-cmpgreater-0_simple_cmp_great
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-if-cmpgreater-1_nested_cmp_great
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-if-cmpeq-0_simple_cmp_eq
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-if-cmpeq-1_nested_cmp_eq_false
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-if-cmpeq-0_cmp_great_false
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-if-cmpeq-nestedIf_cmpeq
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-if-cmplowerequal-0_simple_cmp_lower_eq
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-if-cmplowerequal-1_nested_cmp_lower_eq
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-if-cmplower-1_nested_cmp_lower
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-if-cmplower-0_simple_cmp_lower
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-paranthese-2_mult
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-paranthese-1_add-associativite-gauche
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-paranthese-2_mult-associativite-droite
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-paranthese-1-MULT-associativite-droite
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-paranthese-1_add-associativite-droite
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-paranthese-2_mult-associativite-gauche
TEST OK
TEST-CASE: pld-test-output/tests-Init-easy-paranthese-1_add
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-superieur-0_superieur_simple
>>>>>>> develop
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-inferieur-3_inferieur_multiple_assign
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-inferieur-2_inferieur_complexe _1
TEST OK
>>>>>>> develop
TEST-CASE: pld-test-output/tests-Init-char-inferieur-2_inferieur_complexe
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-inferieur-0_inferieur_if
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-mix-2_if__sup_int_char
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-mix-3_if_complexe_int_char
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-mix-1_if_inf_int_char
TEST OK
<<<<<<< HEAD
TEST-CASE: pld-test-output/tests-Init-char-sub-substraction4
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-char-sub-substraction2
=======
TEST-CASE: pld-test-output/tests-Init-char-mix-0_multAddSub_IntChar
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-egal-0_egal_if
>>>>>>> develop
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-egal-0_egal_simple
TEST OK
<<<<<<< HEAD
TEST-CASE: pld-test-output/tests-Init-char-sup_egal-1_superieur_egal_if
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-char-sup_egal-1_superieur_egal_if_1
=======
TEST-CASE: pld-test-output/tests-Init-char-egal-3_egal_multiple_assign
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-egal-2_egal_complexe
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-egal-1_egal_if
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-mult-8_multiplicationAff
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-mult-8_multiplicationSimple
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-mult-8_multiplicationReturn
>>>>>>> develop
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-sup_egal-3_superieur_egal_multiple_assign
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-sup_egal-1_superieur_egal_if_1
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-sup_egal-0_superieur_egal_simple
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-sup_egal-0_superieur_egal_if
<<<<<<< HEAD
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-char-sup_egal-2_superieur_egal_complexe
=======
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-sup_egal-1_superieur_egal_if
>>>>>>> develop
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-sup_egal-2_superieur_egal_complexe _1
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-sup_egal-2_superieur_egal_complexe
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-inf_egal-3_inferieur_egal_multiple_assign
TEST OK
<<<<<<< HEAD
TEST-CASE: pld-test-output/tests-Init-char-egal-0_egal_if
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-char-egal-1_egal_if
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-char-egal-2_egal_complexe
=======
TEST-CASE: pld-test-output/tests-Init-char-inf_egal-0_inferieur_egal_simple
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-inf_egal-1_inferieur_egal_if_1
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-inf_egal-2_inferieur_egal_complexe
>>>>>>> develop
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-inf_egal-0_inferieur_egal_if
TEST OK
<<<<<<< HEAD
TEST-CASE: pld-test-output/tests-Init-char-add-3_addition_overflow
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-char-add-3_addition_overflow_aff
=======
TEST-CASE: pld-test-output/tests-Init-char-inf_egal-1_inferieur_egal_if
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-inf_egal-2_inferieur_egal_complexe _1
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-superieur-1_superieur_if_1
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-superieur-3_superieur_multiple_assign
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-superieur-0_superieur_simple
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-superieur-2_superieur_complexe
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-superieur-2_superieur_complexe _1
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-superieur-1_superieur_if
>>>>>>> develop
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-add-2_addition
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-add-2-expr-neg
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-add-3_addition_overflow
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-add-3_addition
TEST OK
<<<<<<< HEAD
TEST-CASE: pld-test-output/tests-Init-char-inf_egal-1_inferieur_egal_if_1
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-char-inf_egal-0_inferieur_egal_if
=======
TEST-CASE: pld-test-output/tests-Init-char-add-3_addition_overflow_aff
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-sub-substraction4
>>>>>>> develop
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-sub-substraction3
TEST OK
TEST-CASE: pld-test-output/tests-Init-char-sub-substraction2
TEST OK
TEST-CASE: pld-test-output/tests-Init-while-0_simple_while_neq
TEST OK
TEST-CASE: pld-test-output/tests-Init-while-0_simple_while_leq
TEST OK
TEST-CASE: pld-test-output/tests-Init-while-0_simple_while_smaller
TEST OK
<<<<<<< HEAD
TEST-CASE: pld-test-output/tests-Init-char-mult-8_multiplicationReturn
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-functions--1_combination
=======
TEST-CASE: pld-test-output/tests-Init-while-3_nested_while_with_ifElse
TEST OK
TEST-CASE: pld-test-output/tests-Init-while-0_simple_while_greater
>>>>>>> develop
TEST OK
TEST-CASE: pld-test-output/tests-Init-while-0_while_simple_geq
TEST OK
<<<<<<< HEAD
TEST-CASE: pld-test-output/tests-Init-while-3_nested_while
TEST OK
TEST-CASE: pld-test-output/tests-Init-while-2_while_with_equal
TEST OK
TEST-CASE: pld-test-output/tests-Init-while-1_while_with_if
=======
TEST-CASE: pld-test-output/tests-Init-functions-10_2_fibonacci_iter_tab
unexpected error: linker failed to produce exe-gcc !
TEST-CASE: pld-test-output/tests-Init-functions-8_fun_factoriel
TEST OK
TEST-CASE: pld-test-output/tests-Init-functions-9_fun_7args+char
TEST OK
TEST-CASE: pld-test-output/tests-Init-functions-4_nested_function2
>>>>>>> develop
TEST OK
TEST-CASE: pld-test-output/tests-Init-functions-8_1_iter_factorial
TEST OK
TEST-CASE: pld-test-output/tests-Init-functions-7_fun_7args
TEST OK
TEST-CASE: pld-test-output/tests-Init-functions-5_return_fct_call
<<<<<<< HEAD
TEST FAIL (different results at execution)
=======
TEST OK
TEST-CASE: pld-test-output/tests-Init-functions-1_simple
TEST OK
>>>>>>> develop
TEST-CASE: pld-test-output/tests-Init-functions-0_false_return_test
TEST OK
TEST-CASE: pld-test-output/tests-Init-functions-6_fct_if
TEST OK
TEST-CASE: pld-test-output/tests-Init-functions-4_nested_function2
TEST OK
TEST-CASE: pld-test-output/tests-Init-functions-4_nested_3functions
TEST OK
TEST-CASE: pld-test-output/tests-Init-functions-4_nested_6_args
TEST OK
<<<<<<< HEAD
TEST-CASE: pld-test-output/tests-Init-functions-recursive-0_factorial_fct
TEST OK
TEST-CASE: pld-test-output/tests-Init-tableaux-return_add_char_a
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-tableaux-return_char_sub
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-tableaux-return_char_int_tab
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-tableaux-return_add_char_1
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-tableaux-affectation_int
TEST OK
TEST-CASE: pld-test-output/tests-Init-tableaux-return_add_char_1_2
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-tableaux-affectation_char
TEST OK
TEST-CASE: pld-test-output/tests-Init-tableaux-return_char_add
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-tableaux-return_char
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-tableaux-return_int
TEST FAIL (different results at execution)
TEST-CASE: pld-test-output/tests-Init-tableaux-return_int_complex
TEST FAIL (different results at execution)
=======
<<<<<<< HEAD
TEST-CASE: pld-test-output/tests-Init-functions--1_combination
=======
TEST-CASE: pld-test-output/tests-Init-functions-recursive-0_factorial_fct
TEST OK
TEST-CASE: pld-test-output/tests-Init-tableaux-return_add_char_a
>>>>>>> develop
TEST OK
TEST-CASE: pld-test-output/tests-Init-functions-2_simple2
TEST OK
TEST-CASE: pld-test-output/tests-Init-functions-recursive-2_recursive_parite_croisee
TEST OK
TEST-CASE: pld-test-output/tests-Init-functions-recursive-4_recursive_recurrence_double
TEST OK
TEST-CASE: pld-test-output/tests-Init-functions-recursive-0_factorial_fct
TEST OK
TEST-CASE: pld-test-output/tests-Init-functions-recursive-3_recursive_somme
TEST OK
TEST-CASE: pld-test-output/tests-Init-bloc-3_reassessment_in_else
TEST OK
TEST-CASE: pld-test-output/tests-Init-bloc-0_simple_bloc
TEST OK
TEST-CASE: pld-test-output/tests-Init-bloc-0_simple_nested_bloc
TEST OK
TEST-CASE: pld-test-output/tests-Init-bloc-1_ifElse_differentBlocs
TEST OK
TEST-CASE: pld-test-output/tests-Init-bloc-4_combination
TEST OK
TEST-CASE: pld-test-output/tests-Init-bloc-1_if_different_blocs
TEST OK
TEST-CASE: pld-test-output/tests-Init-bloc-5_combination2
TEST OK
TEST-CASE: pld-test-output/tests-Init-bloc-3_ifElseWhile+blocs
TEST OK
>>>>>>> develop
